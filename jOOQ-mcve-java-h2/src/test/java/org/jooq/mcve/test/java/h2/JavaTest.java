package org.jooq.mcve.test.java.h2;

import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.h2.tables.records.TestRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;

import static org.jooq.mcve.java.h2.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    public Connection connection;
    public DSLContext ctx;

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection("jdbc:h2:~/jooq-mcve-java-2", "sa", "");
        ctx = DSL.using(connection);
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void mcveTest() {
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.CD)
               .values(42)
               .execute()
        );

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record.getId());
    }

    // generates merge into "MCVE"."TEST" using (select cast(? as int) "CD") "t" on "MCVE"."TEST"."ID" = cast(? as int) when not matched then insert ("CD") values ("t"."CD")
    @Test
    public void insertIgnores_ok() {
        ctx.insertInto(TEST)
                .columns(TEST.CD)
                .values(42)
                .onDuplicateKeyIgnore()
                .execute();
    }

    // generates merge into "MCVE"."TEST" "a" using (select cast(? as int) "CD") "t" on "MCVE"."TEST"."ID" = cast(? as int) when not matched then insert ("CD") values ("t"."CD")
    // throws org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "MCVE.TEST.ID" not found
    @Test
    public void insertIgnores_alias_invalidSql() {
        org.jooq.mcve.java.h2.tables.Test TEST = new org.jooq.mcve.java.h2.tables.Test("a");
        ctx.insertInto(TEST)
                .columns(TEST.CD)
                .values(42)
                .onDuplicateKeyIgnore()
                .execute();
    }
}
